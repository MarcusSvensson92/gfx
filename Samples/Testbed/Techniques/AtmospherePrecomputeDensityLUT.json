{
    shader_bindings:
    [
        {
            name: "Constants",
            type: "cbuffer",
            content:
            "
                vec2    DensityScaleHeightRM;
                float   PlanetRadius;
                float   AtmosphereRadius;
            "
        },
        { name: "DensityLUT", type: "image2d", format: "rg32f" }
    ],
    
    compute_shader:
    {
        work_group_size: { x: 8, y: 8, z: 1 },
        include:
        "
            vec2 RaySphereIntersection(vec3 orig, vec3 dir, float radius)
            {
                float a = dot(dir, dir);
                float b = 2.0 * dot(dir, orig);
                float c = dot(orig, orig) - radius * radius;
                float d = sqrt(b * b - 4.0 * a * c);
                return vec2(-b - d, -b + d) / (2.0 * a);
            }
        ",
        main:
        "
            ivec2 dimensions = imageSize(DensityLUT);
        
            if (gl_GlobalInvocationID.x >= dimensions.x ||
                gl_GlobalInvocationID.y >= dimensions.y)
            {
                return;
            }
            
            vec2 coord = vec2(gl_GlobalInvocationID.xy) / vec2(dimensions.xy);
            
            float cos_angle = coord.x * 2.0 - 1.0;
            float sin_angle = sqrt(1.0 - cos_angle * cos_angle);
            float start_height = mix(PlanetRadius, AtmosphereRadius, coord.y);
            vec3 ray_orig = vec3(0.0, start_height, 0.0);
            vec3 ray_dir = vec3(sin_angle, cos_angle, 0.0);
            
            vec2 intersection = RaySphereIntersection(ray_orig, ray_dir, PlanetRadius);
            if (intersection.x > 0.0)
            {
                imageStore(DensityLUT, ivec2(gl_GlobalInvocationID.xy), vec4(1e20));
                return;
            }
            intersection = RaySphereIntersection(ray_orig, ray_dir, AtmosphereRadius);
            
            const int sample_count = 256;
            float step_length = intersection.y / float(sample_count);
            
            vec2 density = vec2(0.0, 0.0);
            for (int i = 0; i < sample_count; ++i)
            {
                vec3 sample_point = ray_orig + ray_dir * ((float(i) + 0.5) * step_length);
                float height = length(sample_point) - PlanetRadius;
                density += exp(-height.xx / DensityScaleHeightRM) * step_length;
            }
            imageStore(DensityLUT, ivec2(gl_GlobalInvocationID.xy), vec4(density, 0.0, 0.0));
        "
    }
}