{
    shader_bindings:
    [
        {
            name: "Constants",
            type: "cbuffer",
            content:
            "
                mat4    InvViewProj;
                mat4    PrevViewProj;
                float   Exposure;
            "
        },
        { name: "OutTemporal",  type: "image2d",  format: "rgba16f" },
        { name: "Temporal",     type: "texture2d"                   },
        { name: "Color",        type: "texture2d"                   },
        { name: "Depth",        type: "texture2d"                   },
        { name: "NearestClamp", type: "sampler"                     },
        { name: "LinearClamp",  type: "sampler"                     }
    ],
    
    compute_shader:
    {
        work_group_size: { x: 8, y: 8, z: 1 },
        include:
        "
            vec3 ClipColor(vec3 c, vec3 c_min, vec3 c_max)
            {
                vec3 center = (c_max + c_min) * 0.5;
                vec3 extent = (c_max - c_min) * 0.5;
                vec3 displacement = c - center;
                vec3 units = abs(displacement / extent);
                float max_unit = max(units.x, max(units.y, max(units.z, 1.0)));
                return center + displacement / max_unit;
            }
            
            float LumaWeight(vec3 c)
            {
                return 1.0 / (((c.g * 2.0) + (c.r + c.b)) * Exposure + 4.0);
            }
            vec3 BlendTemporalColor(vec3 color, vec3 temporal_color, float temporal_weight)
            {
                float w0 = LumaWeight(color) * (1.0 - temporal_weight);
                float w1 = LumaWeight(temporal_color) * temporal_weight;
                return (color * w0 + temporal_color * w1) / (w0 + w1);
            }
        ",
        main:
        "
            ivec2 tex_size = imageSize(OutTemporal);
            if (any(greaterThanEqual(gl_GlobalInvocationID.xy, tex_size.xy)))
            {
                return;
            }
            vec2 pixel_size = 1.0 / vec2(tex_size);
            vec2 tex_coord = (vec2(gl_GlobalInvocationID.xy) + 0.5) * pixel_size;
            
            float depth = texture(sampler2D(Depth, NearestClamp), tex_coord).r;
            vec4 curr_clip_pos = vec4(tex_coord * 2.0 - 1.0, depth, 1.0);
            vec4 curr_world_pos = InvViewProj * curr_clip_pos;
            curr_world_pos /= curr_world_pos.w;
            vec4 prev_clip_pos = PrevViewProj * curr_world_pos;
            prev_clip_pos.xy /= prev_clip_pos.w;
            vec2 prev_tex_coord = prev_clip_pos.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
            
            vec4 temporal = texture(sampler2D(Temporal, LinearClamp), prev_tex_coord);
            vec3 temporal_color = temporal.rgb / max(temporal.a, 1e-6);
            float temporal_weight = temporal.a;
            
            vec2 velocity = (tex_coord - prev_tex_coord) * vec2(tex_size);
            float velocity_weight = clamp(1.0 - length(velocity) / 64.0, 0.0, 1.0);
            temporal_weight *= velocity_weight;
            
            vec3 ctl = texture(sampler2D(Color, NearestClamp), tex_coord + vec2(-1.0, -1.0) * pixel_size).rgb;
            vec3 ctc = texture(sampler2D(Color, NearestClamp), tex_coord + vec2( 0.0, -1.0) * pixel_size).rgb;
            vec3 ctr = texture(sampler2D(Color, NearestClamp), tex_coord + vec2( 1.0, -1.0) * pixel_size).rgb;
            vec3 cml = texture(sampler2D(Color, NearestClamp), tex_coord + vec2(-1.0,  0.0) * pixel_size).rgb;
            vec3 cmc = texture(sampler2D(Color, NearestClamp), tex_coord + vec2( 0.0,  0.0) * pixel_size).rgb;
            vec3 cmr = texture(sampler2D(Color, NearestClamp), tex_coord + vec2( 1.0,  0.0) * pixel_size).rgb;
            vec3 cbl = texture(sampler2D(Color, NearestClamp), tex_coord + vec2(-1.0,  1.0) * pixel_size).rgb;
            vec3 cbc = texture(sampler2D(Color, NearestClamp), tex_coord + vec2( 0.0,  1.0) * pixel_size).rgb;
            vec3 cbr = texture(sampler2D(Color, NearestClamp), tex_coord + vec2( 1.0,  1.0) * pixel_size).rgb;
            
            vec3 c_min = min(ctl, min(ctc, min(ctr, min(cml, min(cmc, min(cmr, min(cbl, min(cbc, cbr))))))));
            vec3 c_max = max(ctl, max(ctc, max(ctr, max(cml, max(cmc, max(cmr, max(cbl, max(cbc, cbr))))))));
            
            temporal_color = ClipColor(temporal_color, c_min, c_max);
            
            temporal_color = BlendTemporalColor(cmc, temporal_color, temporal_weight);
            
            temporal_weight = 1.0 / (2.0 - temporal_weight);
            
            temporal_weight = unpackHalf2x16(packHalf2x16(vec2(temporal_weight))).x;
            temporal_color *= temporal_weight;
            
            imageStore(OutTemporal, ivec2(gl_GlobalInvocationID.xy), vec4(temporal_color, temporal_weight));
        "
    },
}