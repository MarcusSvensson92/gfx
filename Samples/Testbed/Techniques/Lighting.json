{
    vertex_attributes:
    [
        { name: "VertPosition", binding: 0, format: "r16g16b16a16_unorm", offset: 0, input_rate: "vertex" },
        { name: "VertTexCoord", binding: 1, format: "r16g16_sfloat",      offset: 0, input_rate: "vertex" },
        { name: "VertNormal",   binding: 2, format: "r8g8b8a8_unorm",     offset: 0, input_rate: "vertex" }
    ],
    
    shader_bindings:
    [
        {
            name: "Constants",
            type: "cbuffer",
            content:
            "
                mat4  World;
                mat4  WorldViewProj;
                vec3  ViewPosition;
                float PositionScale;
                vec3  LightDirection;
                float LightCoord;
                float AmbientLightIntensity;
                float DirectionalLightIntensity;
            "
        },
        { name: "Diffuse", type: "texture2d" },
        { name: "AmbientLightLUT", type: "texture1d" },
        { name: "DirectionalLightLUT", type: "texture1d" },
        { name: "LinearClamp", type: "sampler" }
    ],
    
    color_attachments:
    [
        "r11g11b10_ufloat"
    ],
    depth_attachment: "d32_sfloat",

    vertex_shader:
    {
        outputs:
        [
            { name: "FragWorldPos", type: "vec3" },
            { name: "FragTexCoord", type: "vec2" },
            { name: "FragNormal",   type: "vec3" },
        ],
        include:
        "
            vec3 DecodeRGBM(vec4 rgbm, float q)
            {
                return (rgbm.rgb * 2.0 - 1.0) * (rgbm.a * q);
            }
            vec3 DecodeNormal(vec3 normal)
            {
                return normal * 2.0 - 1.0;
            }
        ",
        main:
        "
            vec3 local_pos = DecodeRGBM(VertPosition, PositionScale);
            FragWorldPos = (World * vec4(local_pos, 1.0)).xyz;
            gl_Position = WorldViewProj * vec4(local_pos, 1.0);
            FragTexCoord = VertTexCoord;
            FragNormal = DecodeNormal(VertNormal.xyz);
        "
    },
    
    fragment_shader:
    {
        outputs:
        [
            { name: "OutColor", type: "vec4" }
        ],
        include:
        "
            vec3 ApplyAmbientLight(vec3 diffuse)
            {
                vec3 ambient_light = texture(sampler1D(AmbientLightLUT, LinearClamp), LightCoord).rgb;
                return diffuse * ambient_light * AmbientLightIntensity;
            }
            
            vec3 ApplyDirectionalLight(vec3 diffuse, vec3 specular, vec3 world_pos, vec3 normal)
            {
                vec3 view_dir = normalize(world_pos - ViewPosition);
                vec3 half_vec = normalize(-LightDirection - view_dir);
                
                float fresnel = pow(1.0 - clamp(dot(-LightDirection, half_vec), 0.0, 1.0), 5.0);
                diffuse = mix(diffuse, vec3(0.0), fresnel);
                specular = mix(specular, vec3(1.0), fresnel);
                
                float gloss = 0.2;
                float n_dot_h = clamp(dot(half_vec, normal), 0.0, 1.0);
                float specular_factor = pow(n_dot_h, gloss) * (gloss + 2.0) / 8.0;
                
                float n_dot_l = clamp(dot(normal, -LightDirection), 0.0, 1.0);
                vec3 dir_light = texture(sampler1D(DirectionalLightLUT, LinearClamp), LightCoord).rgb * DirectionalLightIntensity;
                return n_dot_l * dir_light * (diffuse + specular_factor * specular);
            }
        ",
        main:
        "
            vec4 diffuse = texture(sampler2D(Diffuse, LinearClamp), FragTexCoord);
            if (diffuse.a < 0.01)
                discard;
            
            OutColor.rgb  = ApplyAmbientLight(diffuse.rgb);
            OutColor.rgb += ApplyDirectionalLight(diffuse.rgb, vec3(0.56), FragWorldPos, FragNormal);
            OutColor.a = 1.0;
        "
    },
    
    depth_stencil_state:
    {
        depth_test_enable: true,
        depth_write_enable: true,
        depth_compare_op: "less_equal"
    },
}