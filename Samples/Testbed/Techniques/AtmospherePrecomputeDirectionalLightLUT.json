{
    shader_bindings:
    [
        {
            name: "Constants",
            type: "cbuffer",
            content:
            "
                vec3    BetaR;
                float   PlanetRadius;
                vec3    BetaM;
                float   AtmosphereRadius;
                float   SunIntensity;
            "
        },
        { name: "DirectionalLightLUT", type: "image1d", format: "rgba32f" },
        { name: "DensityLUT", type: "texture2d" },
        { name: "LinearClamp", type: "sampler" }
    ],
    
    compute_shader:
    {
        work_group_size: { x: 32, y: 1, z: 1 },
        main:
        "
            int dimensions = imageSize(DirectionalLightLUT);
            if (gl_GlobalInvocationID.x >= dimensions)
            {
                return;
            }
            float coord = float(gl_GlobalInvocationID.x) / float(dimensions);
            
            float sun_angle = coord * 2.0 - 1.0;
            vec3 sun_dir = normalize(-vec3(sqrt(clamp(1.0 - sun_angle * sun_angle, 0.0, 1.0)), sun_angle, 0.0));
            
            float height = 500.0;
            float cos_angle = dot(vec3(0.0, 1.0, 0.0), -sun_dir);
            vec2 density_to_atmosphere = texture(sampler2D(DensityLUT, LinearClamp), vec2(cos_angle * 0.5 + 0.5, height / (AtmosphereRadius - PlanetRadius))).rg;
            
            vec3 extinction = exp(-(BetaR * density_to_atmosphere.x + BetaM * density_to_atmosphere.y));
            vec3 directional_light = extinction * SunIntensity;
            
            imageStore(DirectionalLightLUT, int(gl_GlobalInvocationID.x), vec4(directional_light, 0.0));
        "
    },
}